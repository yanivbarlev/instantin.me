version: '3.8'

services:
  db:
    image: postgres:15
    container_name: instantinme_db
    environment:
      POSTGRES_DB: instantinme_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - instantinme_network

  redis:
    image: redis:7-alpine
    container_name: instantinme_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - instantinme_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: instantinme_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/instantinme_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=True
    volumes:
      - .:/app
      - /app/__pycache__
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - instantinme_network

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: instantinme_celery_worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/instantinme_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info
    networks:
      - instantinme_network

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: instantinme_celery_beat
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/instantinme_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app beat --loglevel=info
    networks:
      - instantinme_network

volumes:
  postgres_data:
  redis_data:

networks:
  instantinme_network:
    driver: bridge 