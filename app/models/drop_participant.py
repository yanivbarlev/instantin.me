from sqlalchemy import Column, String, Text, Boolean, DateTime, ForeignKey, UUID, Index, Numeric, Integer, Enum
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
import uuid
import enum

from app.database import Base


class ParticipantStatus(str, enum.Enum):
    """Participant status in drop"""
    INVITED = "invited"                 # User invited but not yet responded
    APPLIED = "applied"                # User applied to join
    PENDING = "pending"                # Application pending approval
    APPROVED = "approved"              # Approved to participate
    ACTIVE = "active"                  # Actively participating
    INACTIVE = "inactive"              # Temporarily inactive
    REMOVED = "removed"                # Removed from drop
    DECLINED = "declined"              # Declined invitation
    COMPLETED = "completed"            # Drop completed, awaiting payout


class ParticipantRole(str, enum.Enum):
    """Role of participant in drop"""
    CREATOR = "creator"                # Drop creator
    CO_CREATOR = "co_creator"          # Co-creator with admin rights
    PARTICIPANT = "participant"        # Regular participant
    PROMOTER = "promoter"             # Focused on promotion/marketing
    CONTENT_CREATOR = "content_creator" # Creates content for drop
    INFLUENCER = "influencer"         # Social media influencer


class DropParticipant(Base):
    """
    DropParticipant model for InstantIn.me Link-in-Bio Commerce Platform.
    Junction table managing user participation in collaborative drops.
    """
    
    __tablename__ = "drop_participants"
    
    # Primary key
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)
    
    # Relationships
    drop_id = Column(UUID(as_uuid=True), ForeignKey("drops.id", ondelete="CASCADE"), nullable=False, index=True)
    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    
    # Participation status and role
    status = Column(Enum(ParticipantStatus), nullable=False, default=ParticipantStatus.PENDING, index=True)
    role = Column(Enum(ParticipantRole), nullable=False, default=ParticipantRole.PARTICIPANT, index=True)
    
    # Revenue sharing configuration
    revenue_percentage = Column(Numeric(5, 2), nullable=False, default=0.0) # Individual revenue share
    fixed_amount = Column(Numeric(10, 2), nullable=True)                    # Fixed payout instead of percentage
    minimum_payout = Column(Numeric(10, 2), nullable=False, default=0.0)    # Minimum guaranteed payout
    bonus_percentage = Column(Numeric(5, 2), nullable=False, default=0.0)   # Bonus for high performance
    
    # Individual performance tracking
    personal_sales = Column(Numeric(12, 2), nullable=False, default=0)      # Revenue generated by this participant
    personal_orders = Column(Integer, nullable=False, default=0)            # Orders attributed to participant
    referral_sales = Column(Numeric(12, 2), nullable=False, default=0)      # Sales from referrals
    referral_count = Column(Integer, nullable=False, default=0)             # Number of referrals made
    
    # Social media and promotion tracking
    social_shares = Column(Integer, nullable=False, default=0)              # Social media shares
    click_throughs = Column(Integer, nullable=False, default=0)             # Clicks on participant's links
    conversion_rate = Column(Numeric(5, 2), nullable=False, default=0)      # Personal conversion rate
    engagement_score = Column(Numeric(5, 2), nullable=False, default=0)     # Overall engagement score
    
    # Participation details
    join_reason = Column(Text, nullable=True)                               # Why they want to join
    skills_offered = Column(Text, nullable=True)                           # Skills they bring to drop
    promotion_plan = Column(Text, nullable=True)                           # How they plan to promote
    audience_size = Column(Integer, nullable=True)                         # Social media following
    
    # Communication preferences
    email_notifications = Column(Boolean, nullable=False, default=True)     # Email notifications enabled
    sms_notifications = Column(Boolean, nullable=False, default=False)      # SMS notifications enabled
    discord_notifications = Column(Boolean, nullable=False, default=False)   # Discord notifications
    slack_notifications = Column(Boolean, nullable=False, default=False)    # Slack notifications
    
    # Approval and invitation tracking
    invited_by_user_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True) # Who invited them
    approved_by_user_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True) # Who approved them
    invitation_message = Column(Text, nullable=True)                       # Personal invitation message
    application_message = Column(Text, nullable=True)                      # Application message
    rejection_reason = Column(Text, nullable=True)                         # Reason for rejection
    
    # Financial tracking
    total_earnings = Column(Numeric(12, 2), nullable=False, default=0)      # Total earnings from this drop
    pending_payout = Column(Numeric(12, 2), nullable=False, default=0)      # Amount pending payout
    paid_amount = Column(Numeric(12, 2), nullable=False, default=0)         # Amount already paid out
    last_payout_date = Column(DateTime(timezone=True), nullable=True)       # Last payout date
    
    # Goals and commitments
    personal_sales_goal = Column(Numeric(12, 2), nullable=True)             # Personal sales target
    social_shares_goal = Column(Integer, nullable=True)                     # Social sharing target
    commitment_hours = Column(Integer, nullable=True)                       # Hours committed to drop
    availability_notes = Column(Text, nullable=True)                        # Availability and schedule notes
    
    # Custom participant settings
    custom_referral_code = Column(String(50), nullable=True, unique=True)   # Custom referral code
    bio_description = Column(Text, nullable=True)                          # Participant bio for drop page
    avatar_url = Column(String(500), nullable=True)                        # Custom avatar for drop
    social_links = Column(Text, nullable=True)                             # JSON of social media links
    
    # Analytics and insights
    most_active_day = Column(String(10), nullable=True)                    # Day of week most active
    most_active_hour = Column(Integer, nullable=True)                      # Hour of day most active
    preferred_promotion_channels = Column(Text, nullable=True)             # JSON of preferred channels
    performance_rating = Column(Numeric(3, 2), nullable=False, default=0)  # 0-5 performance rating
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now(), index=True)
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now(), onupdate=func.now())
    joined_at = Column(DateTime(timezone=True), nullable=True)              # When they officially joined
    last_active_at = Column(DateTime(timezone=True), nullable=True)         # Last activity timestamp
    approved_at = Column(DateTime(timezone=True), nullable=True)            # When approved
    invitation_sent_at = Column(DateTime(timezone=True), nullable=True)     # When invitation sent
    
    # Relationships
    drop = relationship("Drop", back_populates="participants")
    user = relationship("User", back_populates="drop_participations")
    invited_by = relationship("User", foreign_keys=[invited_by_user_id])
    approved_by = relationship("User", foreign_keys=[approved_by_user_id])
    
    # Table indexes for performance
    __table_args__ = (
        Index('ix_drop_participants_drop_user', 'drop_id', 'user_id'),
        Index('ix_drop_participants_drop_status', 'drop_id', 'status'),
        Index('ix_drop_participants_user_status', 'user_id', 'status'),
        Index('ix_drop_participants_role_status', 'role', 'status'),
        Index('ix_drop_participants_performance', 'personal_sales', 'conversion_rate'),
        Index('ix_drop_participants_payout', 'pending_payout', 'last_payout_date'),
        # Unique constraint: user can only participate once per drop
        Index('ix_drop_participants_unique', 'drop_id', 'user_id', unique=True),
    )
    
    def __repr__(self):
        return f"<DropParticipant(id={self.id}, drop_id={self.drop_id}, user_id={self.user_id}, role={self.role}, earnings=${self.total_earnings})>"
    
    # Helper properties
    @property
    def is_active(self) -> bool:
        """Check if participant is active"""
        return self.status in [ParticipantStatus.APPROVED, ParticipantStatus.ACTIVE]
    
    @property
    def is_creator(self) -> bool:
        """Check if participant is creator or co-creator"""
        return self.role in [ParticipantRole.CREATOR, ParticipantRole.CO_CREATOR]
    
    @property
    def can_edit_drop(self) -> bool:
        """Check if participant can edit drop settings"""
        return self.role in [ParticipantRole.CREATOR, ParticipantRole.CO_CREATOR]
    
    @property
    def earnings_display(self) -> str:
        """Get formatted earnings for display"""
        if self.total_earnings == 0:
            return "$0.00"
        return f"${self.total_earnings:.2f}"
    
    @property
    def conversion_rate_display(self) -> str:
        """Get formatted conversion rate"""
        return f"{self.conversion_rate:.1f}%"
    
    @property
    def sales_goal_progress(self) -> float:
        """Get sales goal progress percentage"""
        if not self.personal_sales_goal or self.personal_sales_goal <= 0:
            return 0.0
        return min(100.0, (float(self.personal_sales) / float(self.personal_sales_goal)) * 100)
    
    @property
    def average_order_value(self) -> float:
        """Calculate average order value for this participant"""
        if self.personal_orders <= 0:
            return 0.0
        return float(self.personal_sales) / self.personal_orders
    
    @property
    def pending_approval(self) -> bool:
        """Check if participant is pending approval"""
        return self.status in [ParticipantStatus.APPLIED, ParticipantStatus.PENDING]
    
    @property
    def needs_payout(self) -> bool:
        """Check if participant has pending payout"""
        return self.pending_payout > 0
    
    @property
    def referral_url(self) -> str:
        """Get participant's referral URL"""
        base_url = "https://instantin.me"
        if self.custom_referral_code:
            return f"{base_url}/drops/{self.drop.slug}?ref={self.custom_referral_code}"
        return f"{base_url}/drops/{self.drop.slug}?ref={self.user_id}"
    
    # Business logic methods
    def approve_participation(self, approved_by_user_id: str = None):
        """Approve participant for drop"""
        self.status = ParticipantStatus.APPROVED
        self.approved_at = datetime.utcnow()
        self.joined_at = datetime.utcnow()
        if approved_by_user_id:
            self.approved_by_user_id = approved_by_user_id
    
    def activate_participation(self):
        """Mark participant as active"""
        if self.status == ParticipantStatus.APPROVED:
            self.status = ParticipantStatus.ACTIVE
            self.last_active_at = datetime.utcnow()
    
    def reject_participation(self, reason: str = None):
        """Reject participant application"""
        self.status = ParticipantStatus.DECLINED
        if reason:
            self.rejection_reason = reason
    
    def remove_from_drop(self, reason: str = None):
        """Remove participant from drop"""
        self.status = ParticipantStatus.REMOVED
        if reason:
            self.rejection_reason = reason
    
    def record_sale(self, amount: float, is_referral: bool = False):
        """Record a sale for this participant"""
        if is_referral:
            self.referral_sales += amount
            self.referral_count += 1
        else:
            self.personal_sales += amount
            self.personal_orders += 1
        
        self.last_active_at = datetime.utcnow()
        self.calculate_conversion_rate()
        self.calculate_earnings()
    
    def record_social_share(self):
        """Record a social media share"""
        self.social_shares += 1
        self.last_active_at = datetime.utcnow()
    
    def record_click_through(self):
        """Record a click through participant's link"""
        self.click_throughs += 1
    
    def calculate_conversion_rate(self):
        """Calculate participant's conversion rate"""
        if self.click_throughs <= 0:
            self.conversion_rate = 0
        else:
            self.conversion_rate = (self.personal_orders / self.click_throughs) * 100
    
    def calculate_earnings(self):
        """Calculate total earnings for participant"""
        total_attributed_sales = self.personal_sales + self.referral_sales
        
        # Base earnings from revenue percentage
        base_earnings = total_attributed_sales * (self.revenue_percentage / 100)
        
        # Add bonus for high performance
        bonus_earnings = total_attributed_sales * (self.bonus_percentage / 100)
        
        # Add fixed amount if applicable
        fixed_earnings = self.fixed_amount or 0
        
        total_earnings = base_earnings + bonus_earnings + fixed_earnings
        
        # Ensure minimum payout
        self.total_earnings = max(total_earnings, self.minimum_payout)
        
        # Update pending payout
        self.pending_payout = self.total_earnings - self.paid_amount
    
    def process_payout(self, amount: float):
        """Process payout to participant"""
        self.paid_amount += amount
        self.pending_payout = max(0, self.pending_payout - amount)
        self.last_payout_date = datetime.utcnow()
    
    def generate_referral_code(self):
        """Generate custom referral code"""
        import string
        import random
        
        # Generate 8-character alphanumeric code
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        self.custom_referral_code = f"{self.user.username[:4].upper()}{code}"
    
    def set_goals(self, sales_goal: float = None, shares_goal: int = None, hours_commitment: int = None):
        """Set personal goals for drop participation"""
        if sales_goal:
            self.personal_sales_goal = sales_goal
        if shares_goal:
            self.social_shares_goal = shares_goal
        if hours_commitment:
            self.commitment_hours = hours_commitment
    
    def update_performance_rating(self):
        """Calculate and update performance rating (0-5)"""
        score = 0
        
        # Sales performance (40% weight)
        if self.personal_sales_goal and self.personal_sales_goal > 0:
            sales_score = min(1.0, self.personal_sales / self.personal_sales_goal)
            score += sales_score * 2.0  # Max 2 points
        
        # Conversion rate (30% weight)
        if self.conversion_rate > 0:
            # Normalize conversion rate (assuming 5% is excellent)
            conversion_score = min(1.0, self.conversion_rate / 5.0)
            score += conversion_score * 1.5  # Max 1.5 points
        
        # Social engagement (30% weight)
        if self.social_shares_goal and self.social_shares_goal > 0:
            social_score = min(1.0, self.social_shares / self.social_shares_goal)
            score += social_score * 1.5  # Max 1.5 points
        
        self.performance_rating = round(score, 2)
    
    def send_invitation(self, invited_by_user_id: str, message: str = None):
        """Send invitation to join drop"""
        self.status = ParticipantStatus.INVITED
        self.invited_by_user_id = invited_by_user_id
        self.invitation_sent_at = datetime.utcnow()
        if message:
            self.invitation_message = message
    
    def apply_to_join(self, application_message: str = None, skills: str = None, promotion_plan: str = None):
        """Apply to join drop"""
        self.status = ParticipantStatus.APPLIED
        if application_message:
            self.application_message = application_message
        if skills:
            self.skills_offered = skills
        if promotion_plan:
            self.promotion_plan = promotion_plan
    
    def complete_participation(self):
        """Mark participation as completed"""
        self.status = ParticipantStatus.COMPLETED
        self.calculate_earnings()
        self.update_performance_rating()
    
    def get_notification_preferences(self) -> dict:
        """Get notification preferences"""
        return {
            "email": self.email_notifications,
            "sms": self.sms_notifications,
            "discord": self.discord_notifications,
            "slack": self.slack_notifications
        }
    
    def update_social_links(self, links: dict):
        """Update social media links (JSON)"""
        import json
        self.social_links = json.dumps(links)
    
    def get_social_links(self) -> dict:
        """Get social media links"""
        import json
        if self.social_links:
            return json.loads(self.social_links)
        return {} 